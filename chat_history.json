[{"prompt": "Write some complex python code", "response": ["Certainly", "!", " Here", "'s", " a", " Python", " code", " snippet", " that", " implements", " a", " simple", " version", " of", " the", " **", "A", "*", " search", " algorithm", "**,", " which", " is", " used", " for", " path", "finding", " and", " graph", " traversal", ":\n\n", "```", "python", "\nimport", " heapq", "\n\n", "class", " Node", ":\n", "   ", " def", " __", "init", "__", "(self", ",", " name", ",", " heuristic", "):\n", "       ", " self", ".name", " =", " name", "\n       ", " self", ".he", "uristic", " =", " heuristic", "\n       ", " self", ".adj", "ac", "ents", " =", " []\n", "       ", " self", ".parent", " =", " None", "\n       ", " self", ".g", " =", " ", "0", " ", " #", " Cost", " from", " start", " to", " node", "\n       ", " self", ".f", " =", " ", "0", " ", " #", " Total", " cost", "\n\n", "   ", " def", " add", "_adj", "acent", "(self", ",", " node", ",", " cost", "):\n", "       ", " self", ".adj", "ac", "ents", ".append", "(", "(node", ",", " cost", "))\n\n", "def", " ast", "ar", "_search", "(start", ",", " end", "):\n", "   ", " open", "_list", " =", " []\n", "   ", " closed", "_list", " =", " set", "()\n", "   ", " heapq", ".he", "app", "ush", "(open", "_list", ",", " ", "(start", ".f", ",", " start", "))\n\n", "   ", " while", " open", "_list", ":\n", "       ", " current", "_node", " =", " heapq", ".he", "app", "op", "(open", "_list", ")", "[1]\n", "       ", " closed", "_list", ".add", "(current", "_node", ")\n\n", "       ", " if", " current", "_node", " ==", " end", ":\n", "           ", " path", " =", " []\n", "           ", " while", " current", "_node", ":\n", "               ", " path", ".append", "(current", "_node", ".name", ")\n", "               ", " current", "_node", " =", " current", "_node", ".parent", "\n           ", " return", " path", "[::-", "1", "]\n\n", "       ", " for", " ", "(adj", "acent", ",", " cost", ")", " in", " current", "_node", ".adj", "ac", "ents", ":\n", "           ", " if", " adjacent", " in", " closed", "_list", ":\n", "               ", " continue", "\n           ", " tentative", "_g", " =", " current", "_node", ".g", " +", " cost", "\n\n", "           ", " if", " ", "(tent", "ative", "_g", " < adjacent", ".g", ")", " or", " ", "(adj", "acent", " not", " in", " [i", "", "[1]", " for", " i", " in", " open", "_list]):\n                adjacent.parent = current_node\n                adjacent.g", "", "", "", "", "", "", "", "", "", "", "", " =", " tentative", "_g", "\n               ", " adjacent", ".f", " =", " tentative", "_g", " +", " adjacent", ".he", "uristic", "\n               ", " heapq", ".he", "app", "ush", "(open", "_list", ",", " ", "(adj", "acent", ".f", ",", " adjacent", "))\n\n", "   ", " return", " None", "\n\n", "#", " Example", " usage", ":\n", "start", " =", " Node", "('", "Start", "',", " ", "10", ")\n", "end", " =", " Node", "('", "End", "',", " ", "0", ")\n", "start", ".add", "_adj", "acent", "(end", ",", " ", "5", ")\n\n", "path", " =", " ast", "ar", "_search", "(start", ",", " end", ")\n", "print", "(f", "'", "Path", " found", ":", " {", "path", "}')\n", "``", "`\n\n", "This", " code", " defines", " a", " `", "Node", "`", " class", " to", " represent", " each", " point", " or", " state", " in", " the", " search", " space", ",", " with", " methods", " to", " add", " adjacent", " nodes", " and", " calculate", " costs", ".", " The", " `", "ast", "ar", "_search", "`", " function", " then", " performs", " the", " A", "*", " search", " to", " find", " the", " shortest", " path", " from", " a", " start", " node", " to", " an", " end", " node", ".", " It", " uses", " a", " priority", " queue", " to", " keep", " track", " of", " the", " nodes", " to", " be", " explored", ",", " and", " a", " set", " to", " keep", " track", " of", " the", " nodes", " that", " have", " already", " been", " visited", ".\n\n", "Feel", " free", " to", " ask", " if", " you", " need", " further", " explanation", " or", " another", " example", "!\n", "", ""]}, {"prompt": "Write some simple python code", "response": ["Sure", ",", " here", "'s", " a", " simple", " Python", " code", " snippet", " that", " generates", " a", " list", " of", " prime", " numbers", " up", " to", " a", " given", " number", ":\n\n", "```", "python", "\ndef", " is", "_prime", "(num", "):\n", "   ", " if", " num", " <=", " ", "1", ":\n", "       ", " return", " False", "\n   ", " for", " i", " in", " range", "", "", "(2,", " int", "(num", "**", "0", ".", "5", ")", " +", " ", "1", "):\n", "       ", " if", " num", " %", " i", " ==", " ", "0", ":\n", "           ", " return", " False", "\n   ", " return", " True", "\n\n", "def", " generate", "_pr", "imes", "(limit", "):\n", "   ", " primes", " =", " []\n", "   ", " for", " num", " in", " range", "", "", "(2,", " limit", " +", " ", "1", "):\n", "       ", " if", " is", "_prime", "(num", "):\n", "           ", " primes", ".append", "(num", ")\n", "   ", " return", " primes", "\n\n", "#", " Example", " usage", ":\n", "limit", " =", " ", "20", "\nprint", "(f", "\"", "Prime", " numbers", " up", " to", " {", "limit", "}:", " {", "generate", "_pr", "imes", "(limit", ")}", "\")\n", "``", "`\n\n", "This", " code", " defines", " two", " functions", ":", " `", "is", "_prime", "`", " checks", " if", " a", " number", " is", " prime", ",", " and", " `", "generate", "_pr", "imes", "`", " creates", " a", " list", " of", " prime", " numbers", " up", " to", " a", " specified", " limit", ".", " The", " example", " usage", " shows", " how", " to", " use", " these", " functions", " to", " find", " all", " prime", " numbers", " up", " to", " ", "20", ".", " Feel", " free", " to", " run", " this", " code", " in", " your", " Python", " environment", ",", " and", " let", " me", " know", " if", " you", " have", " any", " questions", " or", " need", " further", " assistance", "!", " \ud83d\ude0a"]}]